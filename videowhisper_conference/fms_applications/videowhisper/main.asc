//application.allowDebug = true;

var version=1.75;
	
var pingIntervalID = null;
var pingInterval = 10000; //ping clients every 10 seconds

var stampIntervalID = null;
var stampInterval = 11000; // check client stamps every 11 seconds
var pingTimeout = 120000; //allowed no connection for a maximum of secons

function pingClients() 
{
var today = new Date();
var timeStamp=today.getTime();
//trace("Pinging clients "+timeStamp+"...");
for (var i in application.userlist) application.userlist[i].call("pingFromServer",null,timeStamp);
}

function checkClientStamp() 
{
//	trace("Looking for ghost connections...");
	var today = new Date();
	var timeStamp=today.getTime();
	
	for (var i in application.userlist) 
	if (timeStamp-application.userlist[i].LastPing > pingTimeout) 
	{
		 var latency=timeStamp-application.userlist[i].LastPing;
		 var Connection=application.userlist[i];
		 
			for (var k in Connection.Rooms) for (var j in application.roomlist[k].queue)
			{
			application.roomlist[k].queue[j].call("messageFromServer",null,"<I>"+Connection.Session+" is dropped due to big latency ("+latency+"ms).</I>", k);
			}
			
		trace("Ghost connection detected. Disconnecting "+Connection.Session+" (Latency:"+latency+"ms)...");
	
		application.disconnect(Connection);
		application.onDisconnect(Connection);
	}

}


application.onAppStart = function() 
{
	trace("Starting Datetopia.com > VideoWhisper.com v"+version);
	trace("Features:");
	trace("+ Unlimited rooms/user lists");
	trace("+ Room queing (for waiting rooms)");
	trace("+ Block/Unblock");
	trace("+ Invites, Multiple invites (for booths)");
	trace("+ Private Instant Messages");
	trace("+ Ghost connection detection");
	trace("+ Room counters");
	trace("+ Microphone/Webcam status");
	trace("+ Profile Details");
	trace("+ Bandwidth Detection");
	trace("+ Ask/Answer Rights (ie Video Chat)");

	this.userlist = {};
	this.roomlist = {};
	this.connectionproblems={};
	this.multisessions=false;

	// generate random payload used in bw detection
	this.payload = new Array();
	
	pingIntervalID = setInterval(pingClients, pingInterval);
	stampIntervalID = setInterval(checkClientStamp, stampInterval);
};

application.onConnect = function(Connection, Session) 
{

		
	if (this.userlist[Session]==null&&Session!=undefined) 
	{
		this.acceptConnection(Connection);
		trace(Session+" Connected");

		//remote functions
		Connection.bandwidthServer=function()
		{
		//calculating bandwidth

		for (var i=0; i<2400; i++){
		application.payload[i] = Math.random();	//32K approx
		}

		application.calculateClientBw(Connection);
		}
		
		Connection.pingServer=function()
		{
			var today = new Date();
			var timeStamp=today.getTime();
//			trace(Session+": Ping "+timeStamp);
			Connection.call("pingFromServer",null,timeStamp);
		}

		Connection.pongServer=function(timeStamp)
		{
			var today = new Date();
			var ctimeStamp=today.getTime();
			Connection.LastPing=timeStamp;
			var latency=ctimeStamp-Connection.LastPing;
			if (latency>500) trace(Session+": Pong is slow! Big Latency: "+latency+"ms");
		}

		Connection.myDetailsServer=function(Username,Type)
		{
			var today = new Date();
			//add properties to Connection object
			Connection.Username=Username;
			Connection.Type=Type;
			Connection.Rooms={};
			Connection.ListedRooms={};
			Connection.Block={};
			Connection.Watching={};
			Connection.Profile={};
			Connection.Answers={};
			Connection.Session=Session;
			Connection.StartTime=today.getTime();
			Connection.LastPing=today.getTime();
			Connection.UserType=Type;

			application.userlist[Session]=Connection;

			trace(Session+" details: "+Username);
		}
		
		Connection.myProfileServer=function(Profile)
		{
			trace(Session+" profile: "+Profile);
			Connection.Profile=Profile;
			
			//notify everybody
			for (var i in Connection.Rooms) for (var j in application.roomlist[i].queue)
			{
			application.roomlist[i].queue[j].call("userProfileFromServer",null, Profile, Connection.Session,i);
			}
		}
		
		
		Connection.myOutputServer=function(Cam,Mic)
		{
			Connection.CamStatus=Cam;
			Connection.MicStatus=Mic;
			//notify everybody seeing
			for (var i in Connection.Rooms) for (var j in application.roomlist[i].queue)
			{
			application.roomlist[i].queue[j].call("userOutputFromServer",null, Cam, Mic, Connection.Session,i);
			}
		}
		
		Connection.myRoomsListServer=function(RoomList)
		{
			//update room list with user numbers and send back
			for (var i in RoomList) if (application.roomlist[i]) Connection.ListedRooms[i]=application.roomlist[i].user_number;
			Connection.call("listedRoomsFromServer",null,Connection.ListedRooms);
		}
		
		
		Connection.joinRoomServer=function(Room)
		{
			trace("Client joins room: "+Session+" @"+Room);
	
			if (!application.multisessions) //remove from other rooms
			{
				for (var i in Connection.Rooms) if (i!=Room) application.removeUserFromRoom(Connection.Session,i);
			}
			
			if (application.userlist[Session].Rooms[Room]==null) 
			{
			application.userlist[Session].Rooms[Room]=1;

			//add room to list if not active and user to room queue
			if (application.roomlist[Room]==null) 
			{
				var newRoom={};
				newRoom.room_name=Room;
				newRoom.user_number=1;
				newRoom.history="";
				newRoom.queue={};
				newRoom.queue_index={};
				newRoom.queue[1]=Connection;
				newRoom.queue_index[Session]=1;
				application.roomlist[Room]=newRoom;
			}
			else
			{
				var newIndex=application.roomlist[Room].user_number+1;
				application.roomlist[Room].user_number=newIndex;
				application.roomlist[Room].queue[newIndex]=Connection;
				application.roomlist[Room].queue_index[Session]=newIndex;
			}
			Connection.call("queueFromServer",null,application.roomlist[Room].queue_index[Session], Room);
			}
			
			for (var i in application.userlist) if (application.userlist[i].Rooms[Room]!=null) 
			{
			application.userlist[i].call("userFromServer",null,Connection, Room); //add to all in room (including self)
			application.userlist[i].call("userOutputFromServer",null,Connection.CamStatus,Connection.MicStatus, Connection.Session,Room);
			application.userlist[i].call("userProfileFromServer",null,Connection.Profile, Connection.Session,Room);

			//notify others about video
			if (Session!=application.userlist[i].Session) Connection.call("userFromServer",null,application.userlist[i], Room); //add others (except self)
			Connection.call("userOutputFromServer",null,application.userlist[i].CamStatus,application.userlist[i].MicStatus, application.userlist[i].Session,Room);
			Connection.call("userProfileFromServer",null,application.userlist[i].Profile, application.userlist[i].Session,Room);
			}

			//make sure it's in the user's list of rooms
			application.userlist[Session].ListedRooms[Room]=application.roomlist[Room].user_number;
			//update user number for all users
			for (var i in application.userlist) if (application.userlist[i].ListedRooms[Room]!=null) application.userlist[i].call("listedRoomFromServer",null,Room,application.roomlist[Room].user_number);
		}
		
		Connection.messageServer=function(Message,Room)
		{
			trace("Message: "+Message+" @"+Room);
			var msg=Message;
			for (var i in application.userlist) if (i!=Session) if (application.userlist[i].Rooms[Room]!=null&&application.userlist[i].Block[Session]==null) application.userlist[i].call("messageFromServer",null,msg, Room);
		}
		
		Connection.privateMessageServer=function(Message,User)
		{
			trace("Private Message: "+Message+" @"+User);
			var msg=Message;
			if (application.userlist[User])	if (application.userlist[User].Block[Session]==null) application.userlist[User].call("privateMessageFromServer",null,msg, Session);
																								 else Connection.call("privateMessageFromServer",null,"Sorry, user "+application.userlist[User].Username+" has blocked you.", User);
			else Connection.call("privateMessageFromServer",null,"Sorry, this user is no longer online and can't receive your messages.", User);
		}
		
		
		Connection.commandServer=function(Command,Room)
		{
			trace("Command from client: "+Command+" @"+Room);
			
			for (var i in application.userlist) if (application.userlist[i].Rooms[Room]!=null||Room=="__All__") application.userlist[i].call("commandFromServer",null,Command, Room);

		}
		
		Connection.askUserServer=function(Type, Message, User)
		{
			trace(Connection.Username+" Asks "+Type+"("+Message+") "+User);
			if (application.userlist[User]) if (!application.userlist[User].Block[Session]) application.userlist[User].call("askFromServer",null,Type, Message, Session);
																							else Connection.call("answerFromServer",null,false,Type, "Sorry, user "+application.userlist[User].Username+" has blocked you.", Session);
		}

		Connection.answerUserServer=function(Answer, Type, Message, User)
		{
			if (application.userlist[User]) 
			if (application.userlist[User].Block[Session]==null)
			{
			 if (!Connection.Answers[User])  Connection.Answers[User]={};
			 Connection.Answers[User][Type]=Answer;
			 application.userlist[User].call("answerFromServer",null,Answer,Type, Message, Session);
			} else Connection.call("answerFromServer",null,false,Type, "Sorry, user "+application.userlist[User].Username+" has blocked you.", Session);
		}

		Connection.blockUserServer=function(UserSession)
		{
			trace(Session+" blocks "+UserSession);
			Connection.Block[UserSession]=1;
		}

		Connection.unblockUserServer=function(UserSession)
		{
			trace(Session+" unblocks "+UserSession);
			if (Connection.Block[UserSession]) delete Connection.Block[UserSession];
		}

		
		Connection.inviteUsersToBooth=function(Users, Lobby, Booth)
		{
			trace(Session+" invites "+Users+" users from "+Lobby+" to "+Booth);
			if (!application.roomlist[Lobby]) trace(Lobby+" not found!");
			else
			{
				if (application.roomlist[Lobby].user_number<Users) Users=application.roomlist[Lobby].user_number;
				for (var i=1;i<=Users;i++) application.roomlist[Lobby].queue[i].call("inviteFromServer",null,Session,Booth);
			}
		}
	//add here		

	}
	else 
	{
		this.rejectConnection(Connection);
		trace(Session+" Rejected (Connection already active!)");
	}
}

application.removeUserFromRoom=function(Session,Room)
{
	//remove room from user room list
	if (application.userlist[Session].Rooms[Room]!=null) delete application.userlist[Session].Rooms[Room];

	//notify other clients in room
	for (var i in application.userlist) if (application.userlist[i].Rooms[Room]!=null) application.userlist[i].call("userLeftFromServer",null,application.userlist[Session], Room);

	//remove user from room queue
	if (application.roomlist[Room].queue_index[Session]!=null)
	{
		dIndex=application.roomlist[Room].queue_index[Session];
		delete application.roomlist[Room].queue_index[Session];
		delete application.roomlist[Room].queue[dIndex];
		for (var i=dIndex;i<application.roomlist[Room].user_number;i++)
		if (application.roomlist[Room].queue[i+1]!=null)
		{
			application.roomlist[Room].queue[i]=application.roomlist[Room].queue[i+1];
			application.roomlist[Room].queue_index[application.roomlist[Room].queue[i].Session]=i;
			application.roomlist[Room].queue[i].call("queueFromServer",null,i, Room);
			trace(Room+"["+i+"]="+application.roomlist[Room].queue[i].Session);
		}
		application.roomlist[Room].user_number--;
	}

	for (var i in application.userlist) if (application.userlist[i].ListedRooms[Room]!=null) application.userlist[i].call("listedRoomFromServer",null,Room,application.roomlist[Room].user_number);

}

application.onDisconnect = function(Connection) 
	{
		trace("Disconnecting user...");
		if (Connection)
		{
		//	for (var i in application.userlist) for (var j in Connection.Rooms) if (application.userlist[i].Rooms[j]!=null) application.userlist[i].call("userLeftFromServer",null,Connection, j);		
		dSession=Connection.Session;
		for (var j in Connection.Rooms) application.removeUserFromRoom(dSession, j);
		
		if  (application.userlist[dSession]) delete application.userlist[dSession];
		trace("Disconnected: "+dSession);
		}
	};
	
//bandwidth detection
Client.prototype.getStreamLength = function(p_streamName) {
	return Stream.length(p_streamName);
}

Client.prototype.checkBandwidth = function() {
	application.calculateClientBw(this);
}

application.calculateClientBw = function(p_client)
{
	var res = new Object();
	res.latency = 0;
	res.cumLatency = 1;
	res.bwTime = 0;
	res.count = 0;
	res.sent = 0;
	res.client = p_client;
	var stats = p_client.getStats();
	var now = (new Date()).getTime()/1;
	res.pakSent = new Array();
	res.pakRecv = new Array();
	res.beginningValues = {b_down:stats.bytes_out, b_up:stats.bytes_in, time:now};
	res.onResult = function(p_val) {

		var now = (new Date()).getTime()/1;
		this.pakRecv[this.count] = now;
		//trace("** onResult this.count = " + this.count + " : this.sent " + this.sent);
		//trace( "Packet interval = " + (this.pakRecv[this.count] - this.pakSent[this.count])*1  );
		this.count++;
		var timePassed = (now - this.beginningValues.time);

		if (this.count == 1) {
			this.latency = Math.min(timePassed, 2000);
			this.latency = Math.max(this.latency, 10);
		}


		//trace("count = " + this.count + ", sent = " + this.sent + ", timePassed = " + timePassed);

		// If we have a hi-speed network with low latency send more to determine
		// better bandwidth numbers, send no more than 6 packets
		if ( this.count == 2 && (timePassed<2000))
		{
			this.pakSent[res.sent++] = now;
			this.cumLatency++;
			this.client.call("onBWCheck", res, application.payload);
		}
		else if ( this.sent == this.count )
		{	
			// See if we need to normalize latency
			if ( this.latency >= 100 )
			{ // make sure we detect sattelite and modem correctly
				if (  this.pakRecv[1] - this.pakRecv[0] > 1000 )
				{
					this.latency = 100;
				}
			}

			// Got back responses for all the packets compute the bandwidth.
			var stats = this.client.getStats();
			var deltaDown = (stats.bytes_out - this.beginningValues.b_down)*8/1000;
			var deltaTime = ((now - this.beginningValues.time) - (this.latency * this.cumLatency) )/1000;
			if ( deltaTime <= 0 )
				deltaTime = (now - this.beginningValues.time)/1000;
			
			var kbitDown = Math.round(deltaDown/deltaTime);

			trace(this.client.Session+": onBWDone: kbitDown = " + kbitDown + ", deltaDown= " + deltaDown + ", deltaTime = " + deltaTime + ", latency = " + this.latency + "KBytes " + (stats.bytes_out - this.beginningValues.b_down)/1024) ;

			this.client.call("onBWDone", null, kbitDown,  deltaDown, deltaTime, this.latency );
		}
	}
	res.pakSent[res.sent++] = now;
	p_client.call("onBWCheck", res, "");
	res.pakSent[res.sent++] = now;
	p_client.call("onBWCheck", res, application.payload);

}